<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat app realtime</title>
    <link rel="icon" type="image/x-icon" href="styleForStartPage/img/icons8-speech-bubble-100.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Questrial&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link rel="stylesheet" href="style_for_login_page/fonts/font-awesome.min.css">
    <link rel="stylesheet" href="style_for_chat_page/css/Account-setting-or-edit-profile.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">
    <link rel="stylesheet" href="style_for_chat_page/css/zectStudio---Sidebar-Menu-by-bbbootstrap.css">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
</head>

<body>
    <%- include('partials/popup_video_call.ejs') %>
        <%- include('partials/sidebar.ejs') %>
            <%- include('partials/popup_notification.ejs') %>
</body>
<style>
    .bx-log-out:before {
        content: "\eb4f";
        font-size: 1.25rem;
    }

    body {
        font-family: 'Questrial', sans-serif;
        overflow: hidden;
    }
</style>
<script src="client-dist/socket.io.js"></script>
<script type="text/javascript">
    const active = document.querySelector("#home");
    active.setAttribute('class', 'nav_link active');
    const userID = '<%= userID %>';
    const socket = io();
    // This event is fired by the Socket instance upon connection and reconnection.
    socket.on('connect', () => {
        socket.emit('user-connected', userID);

    })
    const callsound = document.querySelector('.callsound');
    socket.on('response-to-call-video', data => {
        if (data.friendID == userID) {
            popup.style.display = "flex";
            text.textContent = data.caller_name + " đang gọi cho bạn...";
            call_off_btn.addEventListener('click', event => {
                clearTimeout(timeout);
                popup.style.display = "none";
                socket.emit('reject-call-video', data);
            });
            call_on_btn.addEventListener('click', event => {
                clearTimeout(timeout);
                var url = "/videocall/" + friendid + "/" + roomID;
                socket.emit('leave', { roomID: roomID });
                window.location.href = url;
            })
            const timeout = setTimeout(() => {
                popup.style.display = "none";
                socket.emit('reject-call-video', data);
            }, 50000);
        }

    })
    socket.on('response-reject-call-video', data => {
        if (data.callerID == userID) {
            text_reject_call.textContent = data.reciever_name.trim() + " đã từ chối cuộc gọi của bạn";
            popup_reject_call.style.display = "flex";
            call_back_btn.addEventListener('click', event => {
                clearTimeout(timeout);
                socket.emit('call-video', data);
            })
            const timeout = setTimeout(() => {
                popup_reject_call.style.display = "none";
            }, 3000);
        }
    })

    socket.on('response-to-close-video-call', data => {
        if (data == userID) {
            popup.style.display = "none";
            popup_reject_call.style.display = "none";
            text_reject_call.textContent = "Cuộc gọi đã kết thúc !";
            popup_reject_call.style.display = "flex";
            setTimeout(() => {
                window.location.reload();
            }, 3000);
        }
    })

    socket.on('send-notification-to-friend', data => {
        if (data.friendid == userID) {
            let message = '';
            if (data.message.includes("http://res.cloudinary.com/dz1k6vz7m/image/upload/v1")) {
                message = "Hình ảnh"
            } else {
                message = data.message.slice(0, 40);
            }
            message_notification.textContent = message;
            sender.textContent = data.sender;
            notification_popup.style.display = "block";
            setTimeout(() => {
                notification_popup.style.display = "none";
            }, 4000)
        }
    })

    // is fired when user closes tab / browser or navigates to another page event
    window.addEventListener('beforeunload', function () {
        socket.disconnect(true);
    });
    // is fired when the browser has lost access to the network
    window.addEventListener("offline", () => {
        socket.disconnect(true);
    });
</script>

</html>