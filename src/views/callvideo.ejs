<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>CodePen - A Pen by leducphuong</title>

</head>


<body>
    <!-- partial:index.partial.html -->
    <div class="container">
        <div class="row">
            <div class="col-1">
                <video class="video-client" autoplay playsinline style="pointer-events: none;"> </video>
                <div class="controls">
                    <a class="minimize-window-btn"><img
                            src="https://img.icons8.com/ios-filled/256/minimize-window.png"></a>
                    <a class="video-btn"><img src="https://img.icons8.com/sf-black-filled/256/video-call.png"
                            class="img_video"></a>
                    <a class="shutdown-btn"><img
                            src="https://img.icons8.com/external-others-inmotus-design/256/external-Disconnect-phone-operations-and-functions-others-inmotus-design.png"></a>

                    <a class="microphone-btn"><img src="https://img.icons8.com/ios-glyphs/256/microphone.png"
                            class="img_microphone"></a>
                    <a class="speaker-btn"><img src="https://img.icons8.com/material-sharp/256/speaker.png"></a>
                </div>

            </div>
            <div class="col-2">
                <video class="video-host" autoplay muted playsinline style="pointer-events: none;"></video>
            </div>
        </div>
    </div>
    <!-- partial -->

</body>
<style>
    .col-1 {
        flex-basis: 65%;
    }

    .col-2 {
        flex-basis: 33%;
    }

    .video-client {
        display: flex;
        width: 100%;
        height: 895px;
        border-radius: 20px;
    }

    .controls {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .controls img {
        width: 40px;
        margin: 20px 10px;
        cursor: pointer;
        transition: transform 0.5s;
    }

    .controls .call-icon {
        width: 55px;
    }

    .controls img:hover {
        transform: translateY(-10px);
    }

    .video-host {
        border-radius: 20px;
        position: absolute;
        right: 30px;
        top: 30px;
        height: 190px;
    }
</style>
<script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
<script>
    const userID = '<%= userID %>';
    const roomID = '<%= roomID %>';
    let friendID = '<%= friendID %>';

    const myVideo = document.querySelector('.video-host');
    const peerVideo = document.querySelector('.video-client');
    const speaker_btn = document.querySelector('.speaker-btn');
    const microphone_btn = document.querySelector('.microphone-btn');
    const video_btn = document.querySelector('.video-btn');
    const shutdown_btn = document.querySelector('.shutdown-btn');

    const img_video = document.querySelector('.img_video');
    const img_microphone = document.querySelector('.img_microphone');


    speaker_btn.addEventListener('click', () => {
        audio = false;
    });



    const myPeer = new Peer(userID);

    navigator.mediaDevices.getUserMedia({ // mediaStream is mediaStream Object 
        video: {
            width: { min: 1024, ideal: 1280, max: 1920 },
            height: { min: 576, ideal: 720, max: 1080 },
        },
        audio: true,
    }).then(mediaStream => {

        addVideoStream(myVideo, mediaStream); // display my video on screen

        const call_mine = myPeer.call(friendID, mediaStream); // call to friend who have friend id is friendID
        // call is mediaConnection
        call_mine.on('stream', userVideoStream => {
            addVideoStream(peerVideo, userVideoStream)
        })

        // myPeer.on will emitted when a remote peer attempts to call you
        myPeer.on('call', call => { // call is mediaConnection object
            call.answer(mediaStream);
            // call.on will emitted when a remote peer adds stream
            call.on('stream', stream => {
                addVideoStream(peerVideo, stream); // display remote peer video on my screen
            })
            shutdown_btn.addEventListener('click', () => {
                call.close();
            })
            call.on('close', () => {
                window.location.href = '/chat';
            })
        })


        shutdown_btn.addEventListener('click', () => {
            call_mine.close();
        })

        call_mine.on('close', () => {
            window.location.href = '/chat';
        })

        call_mine.on('error', () => {
            console.log("met error !");
        })

        // this function will turn off or on microphone when use click;
        microphone_btn.addEventListener('click', () => {
            const audioTrack = mediaStream.getAudioTracks()[0];
            // change icon microphone
            if (audioTrack.enabled) {
                img_microphone.src = "https://img.icons8.com/ios-glyphs/256/block-microphone.png";
            } else {
                img_microphone.src = "https://img.icons8.com/ios-glyphs/256/microphone.png";
            }
            audioTrack.enabled = !audioTrack.enabled;
        });

        video_btn.addEventListener('click', () => {
            const videoTrack = mediaStream.getVideoTracks()[0];
            // change video icon
            if (videoTrack.enabled) {
                img_video.src = "https://img.icons8.com/ios-filled/256/no-video.png";
            } else {
                img_video.src = "https://img.icons8.com/sf-black-filled/256/video-call.png";
            }
            videoTrack.enabled = !videoTrack.enabled;
        })

    })

    function addVideoStream(video, stream) {
        video.srcObject = stream;
    }



</script>
<!-- <script src="/logicFile/callvideo.js"></script> -->


</html>