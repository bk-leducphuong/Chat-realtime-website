<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Chat app realtime</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <link href="css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="icon" type="image/x-icon" href="styleForStartPage/img/icons8-speech-bubble-100.png">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Questrial&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="css/bootstrap.min.css">
    <link rel="stylesheet" href="style_for_login_page/fonts/font-awesome.min.css">
    <link rel="stylesheet" href="style_for_chat_page/css/Account-setting-or-edit-profile.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css">
    <link rel="stylesheet" href="style_for_chat_page/css/zectStudio---Sidebar-Menu-by-bbbootstrap.css">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
</head>

<body>
    <%- include('partials/popup_reject_call.ejs') %>
        <%- include('partials/popup_video_call.ejs') %>
            <%- include('partials/sidebar.ejs') %>
                <%- include('partials/popup_notification.ejs') %>
                    <div class="container">
                        <div class="container-1">
                            <div class="container-2">
                                <div class="card chat-app">
                                    <div id="plist" class="people-list">
                                        <div class="input-group">
                                            <input type="text" class="form-control" placeholder="Search...">
                                        </div>
                                        <ul class="list-unstyled chat-list mt-2 mb-0" id="list">
                                            <% for(let i=0; i < friend.length; i++) { %>
                                                <li class="clearfix"
                                                    onclick="joinChat(this,  '<%= friend[i].userID %>')"
                                                    id="user-inbox">
                                                    <img src="https://bootdey.com/img/Content/avatar/avatar1.png"
                                                        alt="avatar">
                                                    <div class="about">
                                                        <div class="name">
                                                            <%= friend[i].username %>
                                                        </div>
                                                        <% if(friend[i].status=="on" ) { %>
                                                            <div class="status"> <i class="fa fa-circle online"></i>
                                                                <%= friend[i].status %>line
                                                            </div>
                                                            <% } else { %>
                                                                <div class="status"> <i
                                                                        class="fa fa-circle offline"></i>
                                                                    <%= friend[i].status %>line
                                                                </div>
                                                                <% } %>
                                                    </div>
                                                    <a href="#" onclick="displayDropdown(this, '<%= i %>')"
                                                        class="three-dots" data-toggle="dropdown" data-display="static">
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                            viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                                            stroke-width="2" stroke-linecap="round"
                                                            stroke-linejoin="round"
                                                            class="feather feather-more-horizontal align-middle"
                                                            id="three-dots">
                                                            <circle cx="12" cy="12" r="1"></circle>
                                                            <circle cx="19" cy="12" r="1"></circle>
                                                            <circle cx="5" cy="12" r="1"></circle>
                                                        </svg>
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                                            viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                                            stroke-width="2" stroke-linecap="round"
                                                            stroke-linejoin="round"
                                                            class="feather feather-more-horizontal align-middle"
                                                            id="three-dots-2">
                                                            <circle cx="12" cy="12" r="1"></circle>
                                                            <circle cx="19" cy="12" r="1"></circle>
                                                            <circle cx="5" cy="12" r="1"></circle>
                                                        </svg>
                                                    </a>
                                                </li>
                                                <div class="dropdown-setting">
                                                    <a href="" class="item-1">Action</a>
                                                    <a href="" class="item-2">Another action</a>
                                                    <a href="" class="item-3">Something esle here</a>
                                                </div>
                                                <% } %>

                                                    <!-- <li class="clearfix active">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar2.png" alt="avatar">
                                    <div class="about">
                                        <div class="name">Aiden Chavez</div>
                                        <div class="status"> <i class="fa fa-circle online"></i> online </div>
                                    </div>
                                </li>
                                <li class="clearfix">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar3.png" alt="avatar">
                                    <div class="about">
                                        <div class="name">Mike Thomas</div>
                                        <div class="status"> <i class="fa fa-circle online"></i> online </div>
                                    </div>
                                </li>
                                <li class="clearfix">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="avatar">
                                    <div class="about">
                                        <div class="name">Christian Kelly</div>
                                        <div class="status"> <i class="fa fa-circle offline"></i> left 10 hours ago
                                        </div>
                                    </div>
                                </li>
                                <li class="clearfix">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar8.png" alt="avatar">
                                    <div class="about">
                                        <div class="name">Monica Ward</div>
                                        <div class="status"> <i class="fa fa-circle online"></i> online </div>
                                    </div>
                                </li>
                                <li class="clearfix">
                                    <img src="https://bootdey.com/img/Content/avatar/avatar3.png" alt="avatar">
                                    <div class="about">
                                        <div class="name">Dean Henry</div>
                                        <div class="status"> <i class="fa fa-circle offline"></i> offline since Oct 28
                                        </div>
                                    </div>
                                </li> -->
                                        </ul>
                                    </div>
                                    <div class="chat">
                                        <div class="chat-header clearfix">
                                            <div class="row">
                                                <div class="col-lg-6">
                                                    <a href="javascript:void(0);" data-toggle="modal"
                                                        data-target="#view_info">
                                                        <img src="https://bootdey.com/img/Content/avatar/avatar2.png"
                                                            alt="avatar">
                                                    </a>
                                                    <div class="chat-about">
                                                        <h6 class="m-b-0" id="nameFriendChatting"></h6>
                                                    </div>
                                                </div>
                                                <div class="col-lg-6 hidden-sm text-right" style="text-align: right;">
                                                    <a onclick="gotoVideoCallPage(`${friendid}`); return false;"
                                                        class="btn btn-outline-secondary"><i
                                                            class="fa fa-camera"></i></a>
                                                    <a class="btn btn-outline-primary" onclick="clickInputFunction()"><i
                                                            class="fa fa-image"></i></a>
                                                    <a href="javascript:void(0);" class="btn btn-outline-info"><i
                                                            class="fa fa-cogs"></i></a>
                                                    <a href="javascript:void(0);" class="btn btn-outline-warning"><i
                                                            class="fa fa-question"></i></a>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="chat-history">
                                            <ul class="m-b-0" id="text-message">
                                                <!-- <li class="clearfix">
                                            <div class="message-data text-right">
                                                <span class="message-data-time">10:10 AM, Today</span>
                                                <img src="https://bootdey.com/img/Content/avatar/avatar7.png"
                                                    alt="avatar">
                                            </div>
                                            <div class="message other-message float-right"> Hi Aiden, how are you? How
                                                is
                                                the
                                                project coming along? </div>
                                        </li>
                                        <li class="clearfix">
                                            <div class="message-data">
                                                <span class="message-data-time">10:12 AM, Today</span>
                                            </div>
                                            <div class="message my-message">Are we meeting today?</div>
                                        </li>
                                        <li class="clearfix">
                                            <div class="message-data">
                                                <span class="message-data-time">10:15 AM, Today</span>
                                            </div>
                                            <div class="message my-message">Project has been already finished and I have
                                                results
                                                to show you.</div>
                                        </li> -->

                                            </ul>
                                        </div>
                                        <form id="form-message">
                                            <div class="chat-message clearfix ">
                                                <div class="input-group mb-0">
                                                    <input id="message" type="text" class="form-control"
                                                        placeholder="Enter text here...">

                                                    <div class="input-group-prepend">
                                                        <button style="border: none; padding: 0px 0px 0px 0px;"><span
                                                                class="input-group-text"
                                                                style="padding-top : 8px; padding-bottom : 8px"><i
                                                                    class="fa fa-send"></i></span></button>
                                                    </div>

                                                </div>
                                            </div>
                                        </form>

                                        <form enctype="multipart/form-data" method="post">
                                            <input type="file" name="image_message" id="image_message"
                                                accept=".png, .jpg, .jpeg" multiple hidden />
                                            <input name="room_id" type="text" id="roomid_img" hidden />
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <style type="text/css">
                        .bx-log-out:before {
                            content: "\eb4f";
                            font-size: 1.25rem;
                        }

                        body {
                            background-color: #f4f7f6;
                            font-family: 'Questrial', sans-serif;
                            overflow: hidden;
                        }

                        #three-dots,
                        #three-dots-2 {
                            -ms-transform: rotate(90deg);
                            transform: rotate(90deg);
                            position: absolute;
                            right: 0;
                            display: none;
                        }

                        #list {
                            position: relative;
                            z-index: 1;
                        }

                        #user-inbox {
                            width: 260px;
                        }

                        .dropdown-setting {
                            background-color: #f4f7f6;
                            display: none;
                            position: absolute;
                            right: 0;
                            border: solid #D3D3D3 1px;
                            border-radius: 10px;
                            width: 177.625px;
                            height: 104px;
                            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.1), 0 6px 20px 0 rgba(0, 0, 0, 0.1);
                            padding: 8px 0px 8px 0px;
                            z-index: 9998;
                        }

                        .item-1,
                        .item-2,
                        .item-3 {
                            cursor: pointer;
                            width: 145.625px !important;
                            font-size: 15px;
                            padding: 4px 16px 4px 16px !important;
                            display: block;
                            width: 100% !important;
                            clear: both;
                            font-weight: 400;
                            color: var(--bs-dropdown-link-color);
                            text-align: inherit;
                            text-decoration: none;
                            white-space: nowrap;
                            background-color: transparent;
                            border: 0;
                        }

                        .item-1:hover,
                        .item-2:hover,
                        .item-3:hover {
                            background-color: #E8E8E8;
                        }

                        /* if element B is child element A so set like this, if not child ( is sibling ) so set #user-inbox:hover+#three-dots  */
                        #user-inbox:hover #three-dots {
                            display: inline-block;
                        }

                        .container {
                            margin-top: 0px !important;
                            margin-left: 68px;
                            margin-right: 0px !important;
                            padding-right: 0px !important;
                            padding-left: 0px !important;
                            width: 100%;
                            height: 100%;
                        }

                        .container-1,
                        .container-2 {
                            width: 100%;
                            height: 100vh;
                            min-height: 100%;
                        }

                        .card {
                            background: #fff;
                            transition: .5s;
                            border: 0;
                            border-radius: .55rem;
                            position: relative;
                            width: calc(100vw - 68px);
                            height: 100vh;
                            min-height: 100%;
                        }

                        .chat {
                            height: 100vh;
                            min-height: 100%;
                        }

                        .chat-history {
                            height: calc(100% - 71.86px - 74px);
                            overflow: auto;
                        }

                        .form-control {
                            border-radius: 30px;
                            border: 1px solid #ced4da;
                        }

                        .chat-app .people-list {
                            width: 300px;
                            position: absolute;
                            left: 0;
                            top: 0;
                            padding: 20px;
                            z-index: 7
                        }

                        .chat-app .chat {
                            margin-left: 300px;
                            border-left: 1px solid #eaeaea
                        }

                        .people-list {
                            -moz-transition: .5s;
                            -o-transition: .5s;
                            -webkit-transition: .5s;
                            transition: .5s
                        }

                        .people-list .chat-list li {
                            padding: 10px 15px;
                            list-style: none;
                            border-radius: 3px
                        }

                        .people-list .chat-list li:hover {
                            background: #efefef;
                            cursor: pointer
                        }

                        .people-list .chat-list li.active {
                            background: #efefef
                        }

                        .people-list .chat-list li .name {
                            font-size: 15px
                        }

                        .people-list .chat-list img {
                            width: 45px;
                            border-radius: 50%
                        }

                        .people-list img {
                            float: left;
                            border-radius: 50%
                        }

                        .people-list .about {
                            float: left;
                            padding-left: 8px
                        }

                        .people-list .status {
                            color: #999;
                            font-size: 13px
                        }

                        .chat .chat-header {
                            padding: 15px 20px;
                            border-bottom: 2px solid #f4f7f6
                        }

                        .chat .chat-header img {
                            float: left;
                            border-radius: 40px;
                            width: 40px
                        }

                        .chat .chat-header .chat-about {
                            float: left;
                            padding-left: 10px
                        }

                        .chat .chat-history {
                            padding: 20px;
                            border-bottom: 2px solid #fff
                        }

                        .chat .chat-history ul {
                            padding: 0
                        }

                        .chat .chat-history ul li {
                            list-style: none;
                            margin-bottom: 30px
                        }

                        .chat .chat-history ul li:last-child {
                            margin-bottom: 0px
                        }

                        .chat .chat-history .message-data {
                            margin-bottom: 15px
                        }

                        .chat .chat-history .message-data img {
                            border-radius: 40px;
                            width: 40px
                        }

                        .chat .chat-history .message-data-time {
                            color: #434651;
                            padding-left: 6px
                        }

                        .chat .chat-history .message {
                            color: #444;
                            padding: 18px 20px;
                            line-height: 26px;
                            font-size: 16px;
                            border-radius: 7px;
                            display: inline-block;
                            position: relative
                        }

                        .chat .chat-history .message:after {
                            bottom: 100%;
                            left: 7%;
                            border: solid transparent;
                            content: " ";
                            height: 0;
                            width: 0;
                            position: absolute;
                            pointer-events: none;
                            border-bottom-color: #fff;
                            border-width: 10px;
                            margin-left: -10px
                        }

                        .chat .chat-history .my-message {
                            background: #efefef
                        }

                        .chat .chat-history .my-message:after {
                            bottom: 100%;
                            left: 30px;
                            border: solid transparent;
                            content: " ";
                            height: 0;
                            width: 0;
                            position: absolute;
                            pointer-events: none;
                            border-bottom-color: #efefef;
                            border-width: 10px;
                            margin-left: -10px
                        }

                        .chat .chat-history .other-message {
                            background: #0dcaf0;
                            text-align: right
                        }

                        .chat .chat-history .other-message:after {
                            border-bottom-color: #e8f1f3;
                            left: 93%
                        }

                        .chat .chat-message {
                            padding: 20px
                        }

                        .online,
                        .offline,
                        .me {
                            margin-right: 2px;
                            font-size: 8px;
                            vertical-align: middle
                        }

                        .online {
                            color: #86c541
                        }

                        .offline {
                            color: #e47297
                        }

                        .me {
                            color: #1d8ecd
                        }

                        .float-right {
                            float: right
                        }

                        .clearfix:after {
                            visibility: hidden;
                            display: block;
                            font-size: 0;
                            content: " ";
                            clear: both;
                            height: 0
                        }

                        #imageItem {
                            border-radius: 20px;
                            max-width: 100%;
                            max-height: 200px;
                            cursor: pointer;
                        }

                        .chat-message {
                            bottom: 0;
                            position: absolute;
                            width: -webkit-fill-available;
                        }
                    </style>
                    <script src="client-dist/socket.io.js"></script>
                    <script type="text/javascript">
                        const socket = io();
                        let roomID = '';
                        const userID = '<%= userID %>';
                        const friend = JSON.parse('<%- JSON.stringify(friend) %>');
                        let friendid = '<%= friend[0].userID %>';
                        const username = '<%= username %>';

                        const chat_history = document.querySelector('.chat-history');
                        const chatForm = document.querySelector('#form-message');
                        const chatMes = document.querySelector('#message');
                        const nameFriendChatting = document.querySelector('#nameFriendChatting');
                        const list = document.getElementById("list").querySelectorAll(".clearfix");
                        const text_message = document.getElementById("text-message");
                        const image_message = document.getElementById("image_message");
                        const status = document.getElementById("list").querySelectorAll(".status");

                        const dropdown_menu = document.querySelectorAll('#three-dots');
                        const dropdown_menu_2 = document.querySelectorAll('#three-dots-2');
                        const option_menu = document.querySelectorAll('.dropdown-setting');
                        function displayDropdown(e, i) {
                            for (let count = 0; count < option_menu.length; count++) {
                                option_menu[count].style.display = "none";
                                dropdown_menu_2[count].style.display = "none";
                            }
                            dropdown_menu_2[i].style.display = "inline-block";
                            option_menu[i].style.display = "block";
                        }
                        window.onclick = (event) => {
                            if (!event.target.matches('.three-dots')) {
                                for (let count = 0; count < option_menu.length; count++) {
                                    option_menu[count].style.display = "none";
                                    dropdown_menu_2[count].style.display = "none";
                                }
                            }

                        }
                        const callsound = document.querySelector('.callsound');
                        const active = document.querySelector("#chat");
                        active.setAttribute('class', 'nav_link active');
                        // This event is fired by the Socket instance upon connection and reconnection.
                        socket.on('connect', () => {
                            socket.emit('user-connected', userID);

                        })

                        socket.on('response-to-call-video', data => {
                            if (data.friendID == userID) {
                                popup.style.display = "flex";
                                text.textContent = data.caller_name + " đang gọi cho bạn...";
                                call_off_btn.addEventListener('click', event => {
                                    clearTimeout(timeout);
                                    popup.style.display = "none";
                                    socket.emit('reject-call-video', data);
                                });
                                call_on_btn.addEventListener('click', event => {
                                    clearTimeout(timeout);
                                    var url = "/videocall/" + friendid + "/" + roomID;
                                    socket.emit('leave', { roomID: roomID });
                                    window.location.href = url;
                                })
                                const timeout = setTimeout(() => {
                                    popup.style.display = "none";
                                    socket.emit('reject-call-video', data);
                                }, 50000);
                            }

                        })
                        socket.on('response-reject-call-video', data => {
                            if (data.callerID == userID) {
                                text_reject_call.textContent = data.reciever_name.trim() + " đã từ chối cuộc gọi của bạn";
                                popup_reject_call.style.display = "flex";
                                call_back_btn.addEventListener('click', event => {
                                    clearTimeout(timeout);
                                    socket.emit('call-video', data);
                                })
                                const timeout = setTimeout(() => {
                                    popup_reject_call.style.display = "none";
                                }, 3000);
                            }
                        })

                        socket.on('response-to-close-video-call', data => {
                            if (data == userID) {
                                popup.style.display = "none";
                                popup_reject_call.style.display = "flex";
                                setTimeout(() => {
                                    window.location.reload();
                                }, 3000)
                            }
                        })


                        const user_inbox = document.querySelectorAll('#user-inbox');
                        user_inbox[0].click();

                        function clickInputFunction() {
                            document.getElementById("roomid_img").value = roomID;
                            image_message.click();
                        }
                        image_message.addEventListener('change', (event) => {
                            let formData = new FormData();

                            formData.append('room_id', roomID);

                            const promises = [];

                            for (let i = 0; i < event.target.files.length; i++) {
                                const messageItem1 = document.createElement('li');
                                messageItem1.setAttribute('class', 'clearfix');
                                const messageItem2 = document.createElement('div');
                                messageItem2.setAttribute('class', 'message float-right');
                                const imageItem = document.createElement('img');
                                imageItem.setAttribute('id', 'imageItem');

                                textMessage.appendChild(messageItem1);
                                messageItem1.appendChild(messageItem2);
                                messageItem2.appendChild(imageItem);

                                imageItem.src = URL.createObjectURL(event.target.files[i]);

                                const promise = fetch(imageItem.src)
                                    .then(Response => Response.blob())
                                    .then(blob => {
                                        formData.append('file', blob);
                                    });
                                promises.push(promise);
                            }

                            //The Promise.all() static method takes an iterable of promises as input and returns a single Promise.
                            //This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable
                            //is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects
                            //with this first rejection reason

                            Promise.all(promises).then(() => {
                                fetch('/chat/image-message', {
                                    method: 'POST',
                                    body: formData
                                })
                                    .then(Response => Response.json())
                                    .then(result => {
                                        const message1 = result.message;
                                        for (let i = 0; i < message1.length; i++) {
                                            const message2 = {
                                                userID: message1[i][0],
                                                message: message1[i][1]
                                            }
                                            socket.emit('chat-message', message2);
                                        }

                                    })
                            });

                        })

                        function joinChat(e, friendId) {
                            friendid = friendId;
                            for (let i = 0; i < list.length; i++) {
                                list[i].classList.remove("active");
                            }

                            e.setAttribute('class', 'clearfix active');
                            nameFriendChatting.textContent = e.querySelector(".name").textContent;

                            socket.emit('checkID', { userID, friendId });

                            socket.on('roomID', data => { // data have roomID and userID , friendId
                                roomID = data.room_id;
                                socket.emit('join', { roomID, userID });

                                fetch(`/chat/${roomID}`, {
                                    method: 'GET',
                                    headers: {
                                        "Content-Type": "application/json"
                                    }
                                })
                                    .then(Response => Response.json())
                                    .then(data => {
                                        let message = JSON.parse(data.message);
                                        // remove  message of previous people
                                        while (text_message.firstChild) {
                                            text_message.removeChild(text_message.firstChild);
                                        }

                                        for (let i = 0; i < message.length; i++) {
                                            if (message[i][0] == userID) {
                                                if (message[i][1].includes("http://res.cloudinary.com/dz1k6vz7m/image/upload/v1")) {
                                                    const messageItem1 = document.createElement('li');
                                                    messageItem1.setAttribute('class', 'clearfix');
                                                    const messageItem2 = document.createElement('div');
                                                    messageItem2.setAttribute('class', 'message float-right');
                                                    const imageItem = document.createElement('img');
                                                    imageItem.setAttribute('id', 'imageItem');

                                                    textMessage.appendChild(messageItem1);
                                                    messageItem1.appendChild(messageItem2);
                                                    messageItem2.appendChild(imageItem);

                                                    imageItem.src = message[i][1];
                                                } else {
                                                    const messageItem1 = document.createElement('li');
                                                    messageItem1.setAttribute('class', 'clearfix');

                                                    const messageItem2 = document.createElement('div');
                                                    messageItem2.setAttribute('class', 'message other-message float-right');
                                                    messageItem2.textContent = message[i][1];

                                                    textMessage.appendChild(messageItem1);
                                                    messageItem1.appendChild(messageItem2);
                                                }

                                            } else {
                                                if (message[i][1].includes("http://res.cloudinary.com/dz1k6vz7m/image/upload/v1")) {
                                                    const messageItem1 = document.createElement('li');
                                                    messageItem1.setAttribute('class', 'clearfix');

                                                    const imageItem = document.createElement('img');
                                                    imageItem.setAttribute('id', 'imageItem');
                                                    imageItem.setAttribute('class', 'my-message')

                                                    textMessage.appendChild(messageItem1);
                                                    messageItem1.appendChild(imageItem);

                                                    imageItem.src = message[i][1];
                                                } else {
                                                    const messageItem1 = document.createElement('li');
                                                    messageItem1.setAttribute('class', 'clearfix');

                                                    const messageItem2 = document.createElement('div');
                                                    messageItem2.setAttribute('class', 'message my-message');
                                                    messageItem2.textContent = message[i][1];

                                                    textMessage.appendChild(messageItem1);
                                                    messageItem1.appendChild(messageItem2);
                                                }

                                            }
                                        }
                                    })
                                    .then(() => {
                                        // scroll down to bottom of chat 
                                        chat_history.scrollTop = chat_history.scrollHeight - chat_history.clientHeight;
                                    })
                            })
                        }

                        chatForm.addEventListener('submit', (e) => {
                            e.preventDefault(); // this will prevent action submiting the form when you click submit button 
                            var message = chatMes.value;
                            socket.emit('send-notification-to-server', { senderID: userID, friendid: friendid, message: message, sender: username });
                            socket.emit('chat-message', { userID: userID, friendid: friendid, message: message });
                            chatMes.value = '';

                        })

                        const textMessage = document.querySelector('#text-message');
                        socket.on('chat-reply', (data) => {
                            if (data.userID == userID) {

                                if (data.message.includes("http://res.cloudinary.com/dz1k6vz7m/image/upload/v1")) {
                                    const messageItem1 = document.createElement('li');
                                    messageItem1.setAttribute('class', 'clearfix');
                                    const messageItem2 = document.createElement('div');
                                    messageItem2.setAttribute('class', 'message float-right');
                                    const imageItem = document.createElement('img');
                                    imageItem.setAttribute('id', 'imageItem');

                                    textMessage.appendChild(messageItem1);
                                    messageItem1.appendChild(messageItem2);
                                    messageItem2.appendChild(imageItem);

                                    imageItem.src = data.message;

                                    chat_history.scrollTop = chat_history.scrollHeight - chat_history.clientHeight;
                                } else {
                                    const messageItem1 = document.createElement('li');
                                    messageItem1.setAttribute('class', 'clearfix');

                                    const messageItem2 = document.createElement('div');
                                    messageItem2.setAttribute('class', 'message other-message float-right');
                                    messageItem2.textContent = data.message;

                                    textMessage.appendChild(messageItem1);
                                    messageItem1.appendChild(messageItem2);

                                    chat_history.scrollTop = chat_history.scrollHeight - chat_history.clientHeight;
                                }
                            }
                            else {
                                if (data.message.includes("http://res.cloudinary.com/dz1k6vz7m/image/upload/v1")) {
                                    const messageItem1 = document.createElement('li');
                                    messageItem1.setAttribute('class', 'clearfix');

                                    const imageItem = document.createElement('img');
                                    imageItem.setAttribute('id', 'imageItem');
                                    imageItem.setAttribute('class', 'my-message')

                                    textMessage.appendChild(messageItem1);
                                    messageItem1.appendChild(imageItem);

                                    imageItem.src = data.message;

                                    chat_history.scrollTop = chat_history.scrollHeight - chat_history.clientHeight;
                                } else {
                                    const messageItem1 = document.createElement('li');
                                    messageItem1.setAttribute('class', 'clearfix');

                                    const messageItem2 = document.createElement('div');
                                    messageItem2.setAttribute('class', 'message my-message');
                                    messageItem2.textContent = data.message;

                                    textMessage.appendChild(messageItem1);
                                    messageItem1.appendChild(messageItem2);

                                    chat_history.scrollTop = chat_history.scrollHeight - chat_history.clientHeight;
                                }

                            }

                        }
                        )

                        // this functions helps redirect to route /videocall/:friendid when click to camera
                        function gotoVideoCallPage(friendid) {
                            var url = "/videocall/" + friendid + "/" + roomID;
                            socket.emit('call-video', { friendID: friendid, reciever_name: nameFriendChatting.textContent, callerID: userID, caller_name: username });
                            socket.emit('leave', { roomID: roomID });
                            window.location.href = url;
                        }

                        socket.on('updateUserStatus', data => {
                            if (data !== {}) {
                                for (let i = 0; i < friend.length; i++) {
                                    if (friend[i].userID == data.userID) {
                                        if (data.status == 'on') {
                                            status[i].innerHTML = "<i class='fa fa-circle online'></i> Online";
                                        } else {
                                            status[i].innerHTML = "<i class='fa fa-circle offline'></i> Offline";
                                        }
                                    }
                                }
                            }

                        })

                        socket.on('send-notification-to-friend', data => {
                            if (data.friendid == userID) {
                                if (data.senderID != friendid) {
                                    let message = '';
                                    if (data.message.includes("http://res.cloudinary.com/dz1k6vz7m/image/upload/v1")) {
                                        message = "Hình ảnh"
                                    } else {
                                        message = data.message.slice(0, 40);
                                    }
                                    message_notification.textContent = message;
                                    sender.textContent = data.sender;
                                    notification_popup.style.display = "block";
                                    setTimeout(() => {
                                        notification_popup.style.display = "none";
                                    }, 4000)
                                }
                            }
                        })
                        // is fired when user closes tab / browser or navigates to another page event
                        window.addEventListener('beforeunload', function () {
                            socket.disconnect(true);
                        });
                        // is fired when the browser has lost access to the network
                        window.addEventListener("offline", () => {
                            socket.disconnect(true);
                        });
                    </script>
</body>

</html>