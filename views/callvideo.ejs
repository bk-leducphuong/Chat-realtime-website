<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Chat app realtime</title>
    <link rel="icon" type="image/x-icon" href="styleForStartPage/img/icons8-speech-bubble-100.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Questrial&display=swap" rel="stylesheet">
</head>


<body>
    <%- include('partials/popup_reject_call.ejs') %>
        <div class="container">
            <div class="row">
                <div class="col-1">
                    <video class="screen-sharing" autoplay></video>
                    <video class="video-client" autoplay playsinline style="pointer-events: none;" id="peer-video">
                    </video>
                </div>
                <div class="controls">
                    <a class="minimize-window-btn" title="minimize window"><img class="img-minimize-window"
                            src="https://img.icons8.com/ios-filled/256/minimize-window.png"></a>
                    <a class="screen-sharing-btn" href="#" id="link-screen-sharing" title="screen sharing"><img
                            src="https://cdn-icons-png.flaticon.com/512/566/566068.png" class="img_screen_sharing"></a>
                    <a class="video-btn" title="camera"><img
                            src="https://img.icons8.com/sf-black-filled/256/video-call.png" class="img_video"></a>
                    <a class="shutdown-btn" title="turn off"><img
                            src="https://img.icons8.com/external-others-inmotus-design/256/external-Disconnect-phone-operations-and-functions-others-inmotus-design.png"></a>

                    <a class="microphone-btn" title="microphone"><img
                            src="https://img.icons8.com/ios-glyphs/256/microphone.png" class="img_microphone"></a>
                    <a class="speaker-btn" title="speaker"><img
                            src="https://img.icons8.com/material-sharp/256/speaker.png" class="img_speaker"></a>
                </div>
                <div class="col-2">
                    <video autoplay playsinline muted id="video-peer-on-screen-sharing"></video>
                    <video class="video-host" autoplay playsinline muted></video>
                </div>
            </div>
        </div>
        <!-- partial -->

</body>
<style>
    body {
        font-family: 'Questrial', sans-serif;
    }

    .avatar {
        width: 80px;
    }

    .col-1 {
        flex-basis: 65%;
    }

    .col-2 {
        flex-basis: 33%;
    }

    #peer-video {
        display: flex;
        width: 100%;
        height: 895px;
        border-radius: 20px;
        object-fit: cover;
    }

    .screen-sharing {
        display: flex;
        pointer-events: none;
        position: absolute;
        border-radius: 20px;
        top: 30px;
        width: 1470px;
        height: 826.875px;
        object-fit: cover;
    }

    .controls {
        position: fixed;
        bottom: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        left: 0;
        right: 0;
        margin-left: auto;
        margin-right: auto;
    }

    .controls img {
        width: 40px;
        margin: 20px 10px;
        cursor: pointer;
        transition: transform 0.5s;
    }

    .controls .call-icon {
        width: 55px;
    }

    .controls img:hover {
        transform: translateY(-10px);
    }

    .video-host {
        border-radius: 20px;
        position: absolute;
        right: 15px;
        top: 30px;
        height: 190px;
        pointer-events: none;
    }

    #video-peer-on-screen-sharing {
        border-radius: 20px;
        position: absolute;
        right: 15px;
        top: 230px;
        height: 190px;
        pointer-events: none;
    }

    .img-minimize-window {
        width: 35px;
    }
</style>
<script src="https://unpkg.com/peerjs@1.3.2/dist/peerjs.min.js"></script>
<script src="https://chat-app-realtime.up.railway.app/client-dist/socket.io.js"></script>
<script src="http://localhost:3000/client-dist/socket.io.js"></script>
<script>

    const userID = '<%= userID %>';
    const roomID = '<%= roomID %>';
    let friendID = '<%= friendID %>';
    const callsound = document.querySelector('.callsound');
    const container = document.querySelector('.container');

    const socket = io();
    socket.on('connect', () => {
        socket.emit('user-connected', userID);

    })
    socket.emit('join', { roomID: roomID });


    const myVideo = document.querySelector('.video-host');
    const peerVideo = document.querySelector('.video-client');
    const peerVideo_id = document.querySelector('#peer-video');
    const speaker_btn = document.querySelector('.speaker-btn');
    const microphone_btn = document.querySelector('.microphone-btn');
    const video_btn = document.querySelector('.video-btn');
    const shutdown_btn = document.querySelector('.shutdown-btn');
    const screen_sharing_btn = document.querySelector('.screen-sharing-btn');
    const screen_sharing = document.querySelector('.screen-sharing');
    const video_host_sreen_sharing = document.querySelector('#video-peer-on-screen-sharing');
    video_host_sreen_sharing.style.display = "none";
    screen_sharing.style.display = "none";

    const img_video = document.querySelector('.img_video');
    const img_microphone = document.querySelector('.img_microphone');
    const img_speaker = document.querySelector('.img_speaker');
    const img_screen_sharing = document.querySelector('.img_screen_sharing');
    const link_screen_sharing = document.querySelector('#link-screen-sharing');
    const myPeer = new Peer(userID);

    let constraint = {
        video: {
            width: { min: 944, ideal: 1887, max: 1887 },
            height: { min: 700, ideal: 895, max: 895 },
            frameRate: { ideal: 30 },
            facingMode: 'user', // use front camera
            aspectRatio: 16 / 9,
        },
        audio: {
            echoCancellation: true, // exclude echo 
            noiseSuppression: true, // exclude noise
            sampleRate: 44100, // an ideal audio sample rate of 44.1kHz
            suppressLocalAudioPlayback: true, // prevent the user to be able to hear themselves
        }
    }

    let contraint_screen_sharing = {
        video: {
            displaySurface: 'monitor',
            logicalSurface: true,
            width: { ideal: screen.width },
            height: { ideal: screen.height },
            resizeMode: 'crop-and-scale',
            aspectRatio: { ideal: 16 / 9 }
        },
        audio: {
            mediaSource: 'audio', // only capture audio from screen of user
            echoCancellation: true, // exclude echo 
            noiseSuppression: true, // exclude noise
            sampleRate: 44100, // an ideal audio sample rate of 44.1kHz
            suppressLocalAudioPlayback: true, // prevent the user to be able to hear themselves
        },
        surfaceSwitching: "include",
        selfBrowserSurface: "exclude",
        systemAudio: "exclude",
    }

    // mediaStream is mediaStream Object  
    navigator.mediaDevices.getUserMedia(constraint).then(mediaStream => {
        addVideoStream(myVideo, mediaStream); // display my video on screen
        // Calls the remote peer specified by id and returns a media connection.
        const call_mine = myPeer.call(friendID, mediaStream); // call to friend who have friend id is friendID
        // call_mine is mediaConnection

        // this function will emitted when a remote peer adds a stream.
        // stream event calls on every track. So, if you stream contains two tracks, stream event should calls twice.
        call_mine.on('stream', userVideoStream => {
            addVideoStream(peerVideo, userVideoStream)
        })

        // myPeer.on will emitted when a remote peer attempts to call you
        myPeer.on('call', call => { // call is mediaConnection object
            call.answer(mediaStream);
            // call.on will emitted when a remote peer adds stream
            call.on('stream', stream => {
                if (stream.getTracks().length == 3 && screen_sharing.style.display == "none") {
                    video_host_sreen_sharing.style.display = "block";
                    screen_sharing.style.display = "block";
                    peerVideo_id.style.display = "none";
                    peerVideo.srcObject = null;
                    const array_track = [stream.getTracks()[0], stream.getTracks()[1]];
                    const mediaStream = new MediaStream(array_track);
                    addVideoStream(video_host_sreen_sharing, mediaStream);
                    stream.removeTrack(stream.getTracks()[0]);
                    stream.removeTrack(stream.getTracks()[0]);

                    addVideoStream(screen_sharing, stream);
                };
                if (stream.getTracks().length == 2 && screen_sharing.style.display == "block") {
                    video_host_sreen_sharing.style.display = "none";
                    video_host_sreen_sharing.srcObject = null;
                    screen_sharing.style.display = "none";
                    screen_sharing.srcObject = null;
                    peerVideo_id.style.display = "block";
                    addVideoStream(peerVideo, stream); // display remote peer video on my screen
                } else {
                    addVideoStream(peerVideo, stream);
                }
            })
            call.on('close', () => {
                call_mine.close();
                localStorage.setItem('screen_sharing', false);
                window.location.href = '/chat';
            })
        })
        link_screen_sharing.addEventListener('click', (event) => {
            event.preventDefault();
            // start screen sharing
            if (img_screen_sharing.src == "https://cdn-icons-png.flaticon.com/512/566/566068.png") {
                screen_sharing.style.display = "block";
                video_host_sreen_sharing.style.display = "block";
                peerVideo_id.style.display = "none";
                peerVideo.srcObject = null;
                addVideoStream(video_host_sreen_sharing, mediaStream);
                // convert icon
                img_screen_sharing.src = "https://cdn-icons-png.flaticon.com/512/566/566072.png";
                localStorage.setItem('screen_sharing', true);
                navigator.mediaDevices.getDisplayMedia(contraint_screen_sharing)
                    .then(new_stream => {
                        addVideoStream(screen_sharing, new_stream);
                        for (const tracks of new_stream.getTracks()) {
                            mediaStream.addTrack(tracks);
                        }
                    })
                    .then(() => {
                        myPeer.call(friendID, mediaStream);
                    })
                    .catch(reason => {
                        console.log(reason);
                        link_screen_sharing.click();
                    })
                // stop screen sharing
            } else {
                img_screen_sharing.src = "https://cdn-icons-png.flaticon.com/512/566/566068.png";
                peerVideo_id.style.display = "block";
                screen_sharing.style.display = "none";
                let tracks = screen_sharing.srcObject.getTracks();
                tracks.forEach((track) => track.stop());
                screen_sharing.srcObject = null;

                video_host_sreen_sharing.style.display = "none";
                video_host_sreen_sharing.srcObject = null;

                mediaStream.removeTrack(mediaStream.getTracks()[2]);
                myPeer.call(friendID, mediaStream);

                localStorage.setItem('screen_sharing', false);
            }
        })

        if (localStorage.getItem('screen_sharing') == "true") {
            peerVideo.style.display = "none";
            link_screen_sharing.click();
        }
        shutdown_btn.addEventListener('click', () => {
            call_mine.close(); // Closes the media connection.
            socket.emit('close-video-call', friendID);
            socket.emit('leave', { roomID: roomID });
            localStorage.setItem('screen_sharing', false);
            window.location.href = '/chat';
        });

        socket.on('response-to-close-video-call', data => {
            if (data == userID) {
                localStorage.setItem('screen_sharing', false);
                socket.emit('leave', { roomID: roomID });
                popup_reject_call.style.display = "flex";
                setTimeout(() => {
                    window.location.href = '/chat';
                }, 3000)

            }
        })
        // this function will turn off or on microphone when use click;
        microphone_btn.addEventListener('click', () => {
            const audioTrack = mediaStream.getAudioTracks()[0];
            // change icon microphone
            if (audioTrack.enabled) {
                img_microphone.src = "https://img.icons8.com/ios-glyphs/256/block-microphone.png";
            } else {
                img_microphone.src = "https://img.icons8.com/ios-glyphs/256/microphone.png";
            }
            audioTrack.enabled = !audioTrack.enabled;
        });

        video_btn.addEventListener('click', () => {
            const videoTrack = mediaStream.getVideoTracks()[0];
            // change video icon
            if (videoTrack.enabled) {
                img_video.src = "https://img.icons8.com/ios-filled/256/no-video.png";
            } else {
                img_video.src = "https://img.icons8.com/sf-black-filled/256/video-call.png";
            }
            videoTrack.enabled = !videoTrack.enabled;
        })

        speaker_btn.addEventListener('click', () => {
            if (peerVideo.muted) {
                peerVideo.muted = false;
                img_speaker.src = "https://img.icons8.com/material-sharp/256/speaker.png";
            } else {
                img_speaker.src = "https://img.icons8.com/ios-filled/256/no-audio.png";
                peerVideo.muted = true;
            }
        })
        socket.on('response-reject-call-video', data => {
            if (data.callerID == userID) {
                text_reject_call.textContent = data.reciever_name.trim() + " đã từ chối cuộc gọi của bạn";
                popup_reject_call.style.display = "flex";
                call_back_btn.addEventListener('click', event => {
                    clearTimeout(timeout);
                    container.disabled = false;
                    popup_reject_call.style.display = "none";
                    socket.emit('call-video', data);
                })
                close_popup_reject_btn.addEventListener('click', event => {
                    clearTimeout(timeout);
                    popup_reject_call.style.display = "none";
                    call_mine.close(); // Closes the media connection.
                    socket.emit('leave', { roomID: roomID });
                    localStorage.setItem('screen_sharing', false);
                    window.location.href = '/chat';
                })
                const timeout = setTimeout(() => {
                    popup_reject_call.style.display = "none";
                    call_mine.close(); // Closes the media connection.
                    socket.emit('leave', { roomID: roomID });
                    localStorage.setItem('screen_sharing', false);
                    window.location.href = '/chat';
                }, 3000);

            }
        })
        call_mine.on('error', (error) => {
            console.log("met error :", error);
        })

    });

    function addVideoStream(video, stream) {
        video.srcObject = null;
        video.srcObject = stream;
    }
    // is fired when user closes tab / browser or navigates to another page event
    window.addEventListener('beforeunload', function () {
        socket.disconnect(true);
    });
    // is fired when the browser has lost access to the network
    window.addEventListener("offline", () => {
        socket.disconnect(true);
    });
    socket.on('disconnect', () => {
        localStorage.setItem('screen_sharing', false);
    })
</script>

</html>